<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Mez3n&#39;s Blog</title>
    <link>http://localhost:1313/mez3n.blog/</link>
    <description>Recent content on Mez3n&#39;s Blog</description>
    <generator>Hugo -- 0.147.8</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 06 Jul 2025 01:10:41 +0300</lastBuildDate>
    <atom:link href="http://localhost:1313/mez3n.blog/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Pthread Internals: How Condition Variables Work</title>
      <link>http://localhost:1313/mez3n.blog/posts/pthreadinternals/</link>
      <pubDate>Sun, 06 Jul 2025 01:10:41 +0300</pubDate>
      <guid>http://localhost:1313/mez3n.blog/posts/pthreadinternals/</guid>
      <description>&lt;h1 id=&#34;understanding-pthread-condition-variables-from-the-inside&#34;&gt;Understanding Pthread Condition Variables from the Inside&lt;/h1&gt;
&lt;p&gt;In this blog post, we&amp;rsquo;ll explore how pthread synchronization primitives work internally, focusing on condition variables. We&amp;rsquo;ll dive deep into the RTEMS implementation to understand how &lt;code&gt;pthread_cond_wait&lt;/code&gt;, &lt;code&gt;pthread_cond_timedwait&lt;/code&gt;, and &lt;code&gt;pthread_cond_clockwait&lt;/code&gt; work under the hood.&lt;/p&gt;
&lt;h2 id=&#34;why-start-with-pthread_cond_clockwait&#34;&gt;Why Start with pthread_cond_clockwait?&lt;/h2&gt;
&lt;p&gt;We&amp;rsquo;ll begin with &lt;code&gt;pthread_cond_clockwait&lt;/code&gt; because it&amp;rsquo;s the most comprehensive function - it includes mutex locking, timeout handling, and clock selection. Understanding this function will help us grasp how the simpler variants work.&lt;/p&gt;</description>
    </item>
    <item>
      <title>POSIX Threads: Thread Queues and Synchronization Internals</title>
      <link>http://localhost:1313/mez3n.blog/posts/theworldofpthread/</link>
      <pubDate>Tue, 24 Jun 2025 18:27:51 +0300</pubDate>
      <guid>http://localhost:1313/mez3n.blog/posts/theworldofpthread/</guid>
      <description>&lt;h1 id=&#34;what-really-happens-when-you-call-pthread_mutex_lock&#34;&gt;What Really Happens When You Call pthread_mutex_lock()?&lt;/h1&gt;
&lt;p&gt;When you write a multithreaded program and call &lt;code&gt;pthread_mutex_lock()&lt;/code&gt;, the operation either succeeds immediately or blocks your thread until the resource becomes available. While this appears straightforward from an API perspective, the underlying implementation involves sophisticated thread queues, priority management, and scheduling algorithms that remain hidden from most developers.&lt;/p&gt;
&lt;h2 id=&#34;pthreads-the-foundation-of-portable-threading&#34;&gt;Pthreads: The Foundation of Portable Threading&lt;/h2&gt;
&lt;p&gt;POSIX Threads (pthreads) have become irreplaceable in C programming across Unix-like systems, from web servers to embedded real-time systems. They represent a standardized solution to multithreaded programming challenges.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Submitting Patches To Newlib</title>
      <link>http://localhost:1313/mez3n.blog/posts/makingpatchestonewlib/</link>
      <pubDate>Tue, 17 Jun 2025 16:12:01 +0300</pubDate>
      <guid>http://localhost:1313/mez3n.blog/posts/makingpatchestonewlib/</guid>
      <description>&lt;h1 id=&#34;contributing-to-newlib-a-step-by-step-guide&#34;&gt;Contributing to Newlib: A Step-by-Step Guide&lt;/h1&gt;
&lt;p&gt;If you&amp;rsquo;re interested in contributing to Newlib, the C standard library used by many embedded systems (including RTEMS and Cygwin), this guide will walk you through the process of submitting patches.&lt;/p&gt;
&lt;h2 id=&#34;what-is-newlib&#34;&gt;What is Newlib?&lt;/h2&gt;
&lt;p&gt;Newlib is a C standard library implementation intended for use on embedded systems. It&amp;rsquo;s widely used in projects like RTEMS, Cygwin, and various bare-metal environments.&lt;/p&gt;
&lt;h2 id=&#34;part-1-creating-and-submitting-patches&#34;&gt;Part 1: Creating and Submitting Patches&lt;/h2&gt;
&lt;h3 id=&#34;1-clone-the-repository&#34;&gt;1. Clone the Repository&lt;/h3&gt;
&lt;p&gt;First, you need to clone the newlib-cygwin repository:&lt;/p&gt;</description>
    </item>
    <item>
      <title>New APIs Added to POSIX Standard (Issue 8): A Comprehensive Implementation Guide</title>
      <link>http://localhost:1313/mez3n.blog/posts/newposixapis/</link>
      <pubDate>Sun, 01 Jun 2025 21:06:56 +0300</pubDate>
      <guid>http://localhost:1313/mez3n.blog/posts/newposixapis/</guid>
      <description>&lt;p&gt;The POSIX Standard Issue 8, released in 2024, represents a significant milestone in operating system standardization, introducing essential APIs that enhance portability, functionality, and compliance across Unix-like systems. As part of my Google Summer of Code 2025 project with RTEMS.&lt;/p&gt;
&lt;h2 id=&#34;project-overview-bridging-the-posix-gap-in-rtems&#34;&gt;Project Overview: Bridging the POSIX Gap in RTEMS&lt;/h2&gt;
&lt;p&gt;RTEMS, known for its reliability in mission-critical applications in space exploration currently lacks support for several key APIs introduced in POSIX Issue 8. This project aims to analyze, implement, and thoroughly test these missing APIs.&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
