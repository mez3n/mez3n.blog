<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>C on Mez3n&#39;s Blog</title>
    <link>https://mez3n.github.io/mez3n.blog/tags/c/</link>
    <description>Recent content in C on Mez3n&#39;s Blog</description>
    <generator>Hugo -- 0.147.8</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 28 Aug 2025 16:02:15 +0300</lastBuildDate>
    <atom:link href="https://mez3n.github.io/mez3n.blog/tags/c/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>GSoC 2025 Final Report: Implementing POSIX Issue 8 Functions in RTEMS</title>
      <link>https://mez3n.github.io/mez3n.blog/posts/gsoc2025wrapup/</link>
      <pubDate>Thu, 28 Aug 2025 16:02:15 +0300</pubDate>
      <guid>https://mez3n.github.io/mez3n.blog/posts/gsoc2025wrapup/</guid>
      <description>&lt;h1 id=&#34;gsoc-2025-final-report-implementing-posix-issue-8-functions-in-rtems&#34;&gt;GSoC 2025 Final Report: Implementing POSIX Issue 8 Functions in RTEMS&lt;/h1&gt;
&lt;h2 id=&#34;project-summary&#34;&gt;Project Summary&lt;/h2&gt;
&lt;p&gt;My Google Summer of Code 2025 project focused on enhancing RTEMS&amp;rsquo; POSIX compliance by implementing critical functions introduced in POSIX Issue 8. RTEMS (Real-Time Executive for Multiprocessor Systems) is a real-time operating system designed for embedded and mission-critical applications, including space exploration and aerospace systems.&lt;/p&gt;
&lt;p&gt;The goal of this project was to analyze, implement, and thoroughly test missing POSIX Issue 8 APIs to bring RTEMS closer to full POSIX compliance, enabling better portability and functionality for real-time applications.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Time APIs in C: A Deep Dive into timespec_get() and Modern Time Retrieval Methods</title>
      <link>https://mez3n.github.io/mez3n.blog/posts/gettime/</link>
      <pubDate>Sun, 17 Aug 2025 22:01:40 +0300</pubDate>
      <guid>https://mez3n.github.io/mez3n.blog/posts/gettime/</guid>
      <description>&lt;h1 id=&#34;time-apis-in-c-from-time-to-timespec_get&#34;&gt;Time APIs in C: From time() to timespec_get()&lt;/h1&gt;
&lt;p&gt;Time measurement in computing has evolved from simple second-based timestamps to high-precision APIs. This guide covers the main time functions available in C, focusing on &lt;code&gt;timespec_get()&lt;/code&gt; - a C11 standard function and its implementation in real-time systems.&lt;/p&gt;
&lt;h2 id=&#34;why-multiple-time-apis&#34;&gt;Why Multiple Time APIs?&lt;/h2&gt;
&lt;p&gt;Time measurement serves different purposes: file timestamps, process scheduling, timeouts, performance measurement, and real-time applications. Each use case has different precision and reliability requirements, leading to multiple APIs optimized for specific needs.&lt;/p&gt;</description>
    </item>
    <item>
      <title>The Exit Family: Understanding Program Termination in C</title>
      <link>https://mez3n.github.io/mez3n.blog/posts/theexitfamily/</link>
      <pubDate>Tue, 05 Aug 2025 18:46:59 +0300</pubDate>
      <guid>https://mez3n.github.io/mez3n.blog/posts/theexitfamily/</guid>
      <description>&lt;h1 id=&#34;the-exit-family-understanding-program-termination-in-c&#34;&gt;The Exit Family: Understanding Program Termination in C&lt;/h1&gt;
&lt;p&gt;When a C program needs to terminate, there are several different functions available, each with distinct behaviors and use cases. Understanding the differences between &lt;code&gt;exit()&lt;/code&gt;, &lt;code&gt;_exit()&lt;/code&gt;, &lt;code&gt;_Exit()&lt;/code&gt;, &lt;code&gt;abort()&lt;/code&gt;, and &lt;code&gt;quick_exit()&lt;/code&gt; is crucial for writing robust system software and understanding how programs interact with the operating system.&lt;/p&gt;
&lt;h2 id=&#34;the-standard-exit-function&#34;&gt;The Standard exit() Function&lt;/h2&gt;
&lt;p&gt;The &lt;code&gt;exit()&lt;/code&gt; function is the most commonly used program termination function, defined in &lt;code&gt;&amp;lt;stdlib.h&amp;gt;&lt;/code&gt;. It performs a clean shutdown of the program by executing cleanup routines before terminating.&lt;/p&gt;</description>
    </item>
    <item>
      <title>GSoC 2025 Midterm Evaluation: Implementing POSIX Issue 8 Functions in RTEMS</title>
      <link>https://mez3n.github.io/mez3n.blog/posts/midtermeval/</link>
      <pubDate>Wed, 16 Jul 2025 21:51:29 +0300</pubDate>
      <guid>https://mez3n.github.io/mez3n.blog/posts/midtermeval/</guid>
      <description>&lt;h1 id=&#34;gsoc-2025-midterm-evaluation-implementing-posix-issue-8-functions-in-rtems&#34;&gt;GSoC 2025 Midterm Evaluation: Implementing POSIX Issue 8 Functions in RTEMS&lt;/h1&gt;
&lt;p&gt;As I reach the midpoint of my Google Summer of Code 2025 journey with RTEMS, I&amp;rsquo;m excited to share the progress I&amp;rsquo;ve made on implementing POSIX Issue 8 functions. This project aims to enhance RTEMS&amp;rsquo; POSIX compliance by adding support for new functions introduced in the latest POSIX standard.&lt;/p&gt;
&lt;h2 id=&#34;project-overview&#34;&gt;Project Overview&lt;/h2&gt;
&lt;p&gt;My GSoC project focuses on implementing and testing 8 key POSIX Issue 8 functions in RTEMS:&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
