<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>System-Calls on Mez3n&#39;s Blog</title>
    <link>https://mez3n.github.io/mez3n.blog/tags/system-calls/</link>
    <description>Recent content in System-Calls on Mez3n&#39;s Blog</description>
    <generator>Hugo -- 0.147.8</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 17 Aug 2025 22:01:40 +0300</lastBuildDate>
    <atom:link href="https://mez3n.github.io/mez3n.blog/tags/system-calls/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Time APIs in C: A Deep Dive into timespec_get() and Modern Time Retrieval Methods</title>
      <link>https://mez3n.github.io/mez3n.blog/posts/gettime/</link>
      <pubDate>Sun, 17 Aug 2025 22:01:40 +0300</pubDate>
      <guid>https://mez3n.github.io/mez3n.blog/posts/gettime/</guid>
      <description>&lt;h1 id=&#34;time-apis-in-c-from-time-to-timespec_get&#34;&gt;Time APIs in C: From time() to timespec_get()&lt;/h1&gt;
&lt;p&gt;Time measurement in computing has evolved from simple second-based timestamps to high-precision APIs. This guide covers the main time functions available in C, focusing on &lt;code&gt;timespec_get()&lt;/code&gt; - a C11 standard function and its implementation in real-time systems.&lt;/p&gt;
&lt;h2 id=&#34;why-multiple-time-apis&#34;&gt;Why Multiple Time APIs?&lt;/h2&gt;
&lt;p&gt;Time measurement serves different purposes: file timestamps, process scheduling, timeouts, performance measurement, and real-time applications. Each use case has different precision and reliability requirements, leading to multiple APIs optimized for specific needs.&lt;/p&gt;</description>
    </item>
    <item>
      <title>The Exit Family: Understanding Program Termination in C</title>
      <link>https://mez3n.github.io/mez3n.blog/posts/theexitfamily/</link>
      <pubDate>Tue, 05 Aug 2025 18:46:59 +0300</pubDate>
      <guid>https://mez3n.github.io/mez3n.blog/posts/theexitfamily/</guid>
      <description>&lt;h1 id=&#34;the-exit-family-understanding-program-termination-in-c&#34;&gt;The Exit Family: Understanding Program Termination in C&lt;/h1&gt;
&lt;p&gt;When a C program needs to terminate, there are several different functions available, each with distinct behaviors and use cases. Understanding the differences between &lt;code&gt;exit()&lt;/code&gt;, &lt;code&gt;_exit()&lt;/code&gt;, &lt;code&gt;_Exit()&lt;/code&gt;, &lt;code&gt;abort()&lt;/code&gt;, and &lt;code&gt;quick_exit()&lt;/code&gt; is crucial for writing robust system software and understanding how programs interact with the operating system.&lt;/p&gt;
&lt;h2 id=&#34;the-standard-exit-function&#34;&gt;The Standard exit() Function&lt;/h2&gt;
&lt;p&gt;The &lt;code&gt;exit()&lt;/code&gt; function is the most commonly used program termination function, defined in &lt;code&gt;&amp;lt;stdlib.h&amp;gt;&lt;/code&gt;. It performs a clean shutdown of the program by executing cleanup routines before terminating.&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
